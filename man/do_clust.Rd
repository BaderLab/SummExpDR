% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/IterativeClustering.R
\name{do_clust}
\alias{do_clust}
\title{Run iterative clustering w/ and w/o resampling, permutation}
\usage{
do_clust(
  object,
  inp_data,
  k,
  num_iter = 200,
  std_norm = T,
  algorithm = "spectral_kernlab",
  pct_resample = 0.8,
  affi_K = 20,
  sigma = 0.5,
  base_seed = 2,
  ...
)
}
\arguments{
\item{k}{integer of length 1_ number of clusters}

\item{num_iter}{numeric, length 1_ number of iterations of clustering_
Note that if we are running a deterministic clustering algorithm
without resampling, this argument automatically gets set to 1}

\item{std_norm}{standard normalize data prior to clustering?
and is set prior to sampling the data_}

\item{algorithm}{character_ spectral_kernlab runs spectral clustering as implemented in kernlab package,
spectral_SNFtool runs spectral clustering as implemented in SNFtool package, kmeans runs
kmeans clustering as implemented in \code{\link{stats::kmeans}} package}

\item{pct_resample}{percentage of data to resample_ Specify as number
greater than 0 and less than 1}

\item{affi_K}{numeric, length 1_ K value for affinityMatrix_
used if algorithm = 'spectral_SNFtool' or 'spectral_kernlab'}

\item{sigma}{numeric of length 1_ sigma value for affinityMatrix_
used if algorithm = 'spectral_kernlab' or 'spectral_SNFtool'}

\item{base_seed}{integer of length 1_ lowest seed in range
base_seed:(base_seed + num_iter - 1) used for resampling,
and in case of clustering with restarts, clustering_ For resampling,
in each iteration, the seed used is incremented up in this range,
and before clustering the seed is reset to the current seed in the range
(i_e_ in a given iteration the seed set for resampling and clustering are
the same)}

\item{...}{other args for iter_clust}
}
\value{
iter_clust_obj, with slots clusts_full, clusts_rs,
and clusts_rs_perm determined_
}
\description{
run multiple rounds of clustering on data in
iter_clust_obj, doing so on full dataset without resampling,
and again on dataset with resampling applied, and obtain
permuted labels for cluster labels obtained from resampling
}
\details{
iter_clust is run first on the whole dataset (i_e_
no resampling), generating a matrix with num_iter clustering solutions
with labels for all samples_ This result goes to the clusts_full slot
of the input object_ iter_clust is then run again, this time with
resampling in each iteration, generating a similar matrix of clustering
solutions, but for each solution labels are only given to samples that
were included in the sampling for the given iteration_ This result is
put in the slot clusts_rs_ We then generate a copy of the matrix
given to clusts_rs and permute the labels for each solution, effectively
given num_iter 'solutions' with random labels_ The permuted labels matrix
is assigned to the slot clusts_rs_perm
}
