% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/IterativeClustering.R
\name{run_iter_clust_functions}
\alias{run_iter_clust_functions}
\title{Run do_clust, calc_sim_mats, unique_solutions, compare_rs_perm,
compare_full_rs, pick_soln in sequence}
\usage{
run_iter_clust_functions(
  inp_data,
  k,
  num_iter = 200,
  std_norm = T,
  algorithm = "spectral_kernlab",
  pct_resample = 0.8,
  affi_K = 20,
  sigma = 0.5,
  base_seed = 2,
  ...
)
}
\arguments{
\item{inp_data}{mxn matrix of data}

\item{k}{integer of length 1_ number of clusters}

\item{num_iter}{numeric, length 1_ number of iterations of clustering_
Note that if we are running a deterministic clustering algorithm
without resampling, this argument automatically gets set to 1}

\item{std_norm}{standard normalize data prior to clustering?
and is set prior to sampling the data_}

\item{algorithm}{character_ spectral_kernlab runs spectral clustering as implemented in kernlab package,
spectral_SNFtool runs spectral clustering as implemented in SNFtool package, kmeans runs
kmeans clustering as implemented in \code{\link{stats::kmeans}} package}

\item{pct_resample}{percentage of data to resample_ Specify as number
greater than 0 and less than 1}

\item{affi_K}{numeric, length 1_ K value for affinityMatrix_
used if algorithm = 'spectral_SNFtool' or 'spectral_kernlab'}

\item{sigma}{numeric of length 1_ sigma value for affinityMatrix_
used if algorithm = 'spectral_kernlab' or 'spectral_SNFtool'}

\item{base_seed}{integer of length 1_ lowest seed in range
base_seed:(base_seed + num_iter - 1) used for resampling,
and in case of clustering with restarts, clustering_ For resampling,
in each iteration, the seed used is incremented up in this range,
and before clustering the seed is reset to the current seed in the range
(i_e_ in a given iteration the seed set for resampling and clustering are
the same)}

\item{...}{other args for iter_clust}
}
\value{
iter_clust_obj with a solution reported as well as associated
information
}
\description{
Run do_clust, calc_sim_mats, unique_solutions, compare_rs_perm,
compare_full_rs, pick_soln in sequence
}
\details{
if more than one unique solution to pick from,
pick the solution with the highest median ARI when compared to
resampled solutions_ In case of ties, pick solution with highest
proportion of clustering solutions in full dataset_ In cases
of further ties, pick the first solution our of the set of
the ties for proportion
}
